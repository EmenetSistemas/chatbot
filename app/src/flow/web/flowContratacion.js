const { addKeyword } = require("@bot-whatsapp/bot");

const { obtenerZonasCobertura, normalizeString, obtenerPlanPorIdentificador, obtenerPlanesInternetTipo } = require("../../services/web.service");
const { registrarSolicitudInstalacion } = require("../../services/client.service");

let nombre, telefono, localidad, paquete, ubicacion, caracteristicasDomicilio, detallePaquete;

const flowContratacion = addKeyword(['3', 'contratacion', 'internet'], { sensitive: true })
    .addAction(
        async (ctx, { provider }) => {
            const abc = await provider.getInstance();
            await abc.chatModify({ archive: false, lastMessages: [ctx] }, ctx.key.remoteJid);
        }
    )
    .addAnswer(
        [
            'ü§ñ Te solicitar√© un par de datos necesarios para poder continuar con este proceso',
            '',
            '‚ùå Si deseas cancelar o salir de este proceso lo puedes realizar en cualquier momento colocando la palabra *cancelar*'
        ]
    )
    .addAnswer(
        'ü§ñ ¬øC√∫al es t√∫ nombre completo?',
        { capture: true },
        async (ctx, { flowDynamic, gotoFlow, fallBack }) => {
            const input = normalizeString(ctx.body);

            if (input == 'cancelar') {
                const { flowSecundario } = require("../start/flowSecundario");
                return await gotoFlow(flowSecundario);
            }

            if (input.split(' ').length <= 2) {
                await flowDynamic('Se debe colocar nombre completo');
                return await fallBack();
            }

            nombre = ctx.body;
            telefono = ctx.from;

            await flowDynamic('Mucho gusto *' + nombre + '*, continuemos...');
            return await flowDynamic('ü§ñ ¬øCu√°l es la localidad en donde vive?');
        }
    )
    .addAction(
        { capture: true },
        async (ctx, { flowDynamic, fallBack, gotoFlow }) => {
            const input = normalizeString(ctx.body);

            if (ctx.body == 'cancelar') {
                const { flowSecundario } = require("../start/flowSecundario");
                return await gotoFlow(flowSecundario);
            }

            const coberturas = await obtenerZonasCobertura(input);

            if (coberturas.responseType == 3) {
                await flowDynamic([
                    'No indetifico t√∫ localidad, puedes intentar de nuevo verificando errores de escritura'
                ]);
            }

            if (coberturas.responseType == 2) {
                await flowDynamic([
                    'No indetifico t√∫ localidad, pero encontre localidades similares.\nPuedes colocar de nuevo t√∫ la localidad si es que se encuentra en el siguiente listado:',
                    coberturas.mensaje
                ]);
            }

            if (coberturas.responseType == 1) {
                localidad = coberturas.comunidad;
                return await flowDynamic([
                    '‚úîÔ∏è Excelente, en *' + localidad + '* contamos con cobertura üõú\n\nü§ñ Ahora, te comparto los planes con los que contamos actualmente:',
                    'ü§ñ En Emenet Comunicaciones contamos con planes mensuales y planes anuales, cada uno con ventajas diferentes seg√∫n tus necesidades ¬øCu√°l te interesa m√°s?\n\n   *1.* Planes mensuales\n   *2.* Planes anuales'
                ]);
            }

            return await fallBack();
        }
    )
    .addAction(
        { capture: true },
        async ({ body }, { flowDynamic, fallBack, gotoFlow }) => {
            if (body == 'cancelar') {
                const { flowSecundario } = require("../start/flowSecundario");
                return await gotoFlow(flowSecundario);
            }

            tipoPlanes = body;
            if (body == 1) {
                const planes = await obtenerPlanesInternetTipo('mensual');
                await flowDynamic('ü§ñ Los planes mensuales de emenet proporcionan flexibilidad y son ideales para compromisos a corto plazo o para probar servicios sin una gran inversi√≥n inicial');
                return await flowDynamic([
                    ...planes,
                    'ü§ñ ¬øQu√© plan te interesa m√°s?'
                ]);
            } else if (body == 2) {
                const planes = await obtenerPlanesInternetTipo('anual');
                await flowDynamic('ü§ñ Los planes anuales de emenet ofrecen ahorro, estabilidad y soporte continuo, ideales para quienes buscan una soluci√≥n econ√≥mica üíµ y confiable a largo plazo');
                return await flowDynamic([
                    ...planes,
                    'ü§ñ ¬øQu√© plan te interesa m√°s?'
                ]);
            }

            await flowDynamic('Se debe colocar una opci√≥n valida');
            return fallBack();
        }
    )
    .addAction(
        { capture: true },
        async ({ body }, { flowDynamic, gotoFlow, fallBack }) => {
            if (body == 'cancelar') {
                const { flowSecundario } = require("../start/flowSecundario");
                return await gotoFlow(flowSecundario);
            }

            const input = normalizeString(body);

            if (!isNaN(input)) {
                const plan = await obtenerPlanPorIdentificador(tipoPlanes, input);

                if (plan) {
                    paquete = plan.pkTblPlan;
                    detallePaquete = plan.mensaje;

                    return await flowDynamic([
                        plan.mensaje,
                        'ü§ñ Ahora, ¬øPodr√≠as compartirnos tu ubicaci√≥n actual/fija?\n\n*(NOTA: UBICACI√ìN ACTUAL/FIJA, NO EN TIEMPO REAL)* üåé\n\n*X* Si no se encuentra en su domicilio o no tiene forma de enviar la ubicaci√≥n'
                    ]);
                }
            }

            await flowDynamic([
                'No se encontr√≥ ning√∫n plan con ese identificador.\nPor favor, introduce un identificador v√°lido',
                'ü§ñ ¬øQu√© plan te interesa m√°s?'
            ]);

            return await fallBack();
        }
    )
    .addAction(
        { capture: true },
        async (ctx, { flowDynamic, gotoFlow, fallBack }) => {
            const input = normalizeString(ctx.body);

            if (input == 'cancelar') {
                const { flowSecundario } = require("../start/flowSecundario");
                return await gotoFlow(flowSecundario);
            }

            if (input == 'x') {
                return await flowDynamic('De acuerdo, dejaremos esto para m√°s tarde\n\nü§ñ Ahora, ¬øpordr√≠as compartirme algunas referencias/caracter√≠sticas de tu domicilio? üìë, para poder identificarlo mejor');
            }

            if (ctx.body.includes('http') && ctx.body.includes('maps')) {
                ubicacion = ctx.body;

                return await flowDynamic([
                    'Gracias por compartirnos tu ubicaci√≥n...',
                    'ü§ñ Ahora, ¬øpordr√≠as compartirme algunas referencias/caracter√≠sticas de tu domicilio? üìë, para poder identificarlo mejor'
                ]);
            }

            const coordenadas = ctx.message.locationMessage;

            if (coordenadas) {
                ubicacion = `https://www.google.es/maps?q=${coordenadas.degreesLatitude}, ${coordenadas.degreesLongitude}`;

                return await flowDynamic([
                    'Gracias por compartirnos tu ubicaci√≥n...',
                    'ü§ñ Ahora, ¬øpordr√≠as compartirme algunas referencias/caracter√≠sticas de tu domicilio? üìë, para poder identificarlo mejor'
                ]);
            }

            await flowDynamic('No es lo que se esperaba.\n\n¬øPodr√≠as compartirnos tu ubicaci√≥n actual/fija?\n\n*(NOTA: UBICACI√ìN ACTUAL/FIJA, NO EN TIEMPO REAL)* üåé\n\n*X* Si no se encuentra en su domicilio o no tiene forma de enviar la ubicaci√≥n');
            return await fallBack();
        }
    )
    .addAction(
        { capture: true },
        async ({ body }, { flowDynamic, gotoFlow }) => {
            const input = normalizeString(body);

            if (input == 'cancelar') {
                const { flowSecundario } = require("../start/flowSecundario");
                return await gotoFlow(flowSecundario);
            }

            caracteristicasDomicilio = body;
            const mensaje = ubicacion ?
                `*Nombre*:\n    üë§ ${nombre}\n\n*Localidad*:\n    üìç ${localidad}\n\n*Domicilio*:\nüß≠ ${ubicacion}\n\n*Caracter√≠sticas*:\n\n${caracteristicasDomicilio}\n\n${detallePaquete}` :
                `*Nombre*:\n    üë§ ${nombre}\n\n*Localidad*:\n    üìç ${localidad}\n\n*Caracter√≠sticas*: üìë\n\n${caracteristicasDomicilio}\n\n${detallePaquete}`;

            return await flowDynamic([
                'ü§ñ A continuaci√≥n te comparto un resumen de la informaci√≥n compartida:',
                mensaje,
                'ü§ñ ¬øLa informaci√≥n es la correcta?\n\n    a. Continuar con el proceso ‚úîÔ∏è\n    b. Cancelar proceso ‚ùå'
            ]);
        }
    )
    .addAction(
        { capture: true },
        async ({ body }, { flowDynamic, gotoFlow, fallBack }) => {
            const input = normalizeString(body);
            if (input != 'a' && input != 'b') {
                await flowDynamic([
                    'Se debe colocar una opci√≥n v√°lida',
                    'ü§ñ ¬øLa informaci√≥n es la correcta?\n\n    a. Continuar con el proceso ‚úîÔ∏è\n    b. Cancelar proceso ‚ùå'
                ]);
                return fallBack();
            }

            if (input == 'b') {
                const { flowSecundario } = require("../start/flowSecundario");
                return await gotoFlow(flowSecundario);
            }

            const solicitud = {
                nombre,
                telefono,
                localidad,
                paquete,
                ubicacion,
                caracteristicasDomicilio
            };
            const errorPeticion = await registrarSolicitudInstalacion(solicitud);

            if (errorPeticion) {
                await flowDynamic('Upss...! Ocurrio un error inesperado, por favor apoyanos repitiendo el proceso');
                const { flowSecundario } = require("../start/flowSecundario");
                return await gotoFlow(flowSecundario);
            }

            return flowDynamic([
                'ü§ñ Muy bien, gracias por apoyarnos con tu informaci√≥n\n\nRecuerde que para confirmar 100% la cobertura en su domicilio es necesario el estudio que realizar√° el asesor',
                'Uno de nuestros asesores üßëüèª‚Äçüíª se podr√° en contacto contigo lo antes posible para concluir con este proceso, por favor este al pendiente de este chat...'
            ]);
        }
    )

module.exports = { flowContratacion };